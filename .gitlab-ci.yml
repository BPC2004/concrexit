variables:
  POSTGRES_DB: thalia
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ""
  # https://hub.docker.com/r/thalia/python-thalia/
  # https://github.com/thaliawww/python-thalia
  # Should get auto-updated with the official 'python' repository
  # Installs:
  #  - pip: coverage, poetry
  #  - apt: ghostscript
  PY38_IMAGE: thalia/python-thalia:3.8
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/pip-cache"

stages:
  - test
  - deploy

codestyle:
  stage: test
  image: $PY38_IMAGE
  before_script:
    - poetry install --no-interaction
  script:
    - black --check .
    # Check for obsolete translations in .po files (starting with `#~`).
    - cd website
    - grep --include="*.po" --files-with-matches --recursive "^#~" && exit 1 || echo "No obsolete translations found."
    # Check for untranslated strings in .po files
    - empty_strings=$(sed '$a\\' **/locale/nl/LC_MESSAGES/django.po | tac | sed '/^$/N;/\nmsgstr ""$/,/^msgid/!d' | tac)
    - empty_strings+=$(sed '$a\\' locale/nl/LC_MESSAGES/django.po | tac | sed '/^$/N;/\nmsgstr ""$/,/^msgid/!d' | tac)
    - if [[ $empty_strings ]]; then echo $empty_strings && exit 1; else echo "No untranslated strings found."; fi
    # Check for fuzzy translations in .po files
    - grep --include="*.po" --files-with-matches --recursive "#, fuzzy" && exit 1 || echo "No fuzzy translations found."

django-tests:
  image: $PY38_IMAGE
  stage: test
  services:
    - postgres:latest
  before_script:
    - git log -1
    - poetry install --no-interaction
  script:
    - cd website
    - poetry run python manage.py check
    - poetry run python manage.py templatecheck --project-only
    - poetry run python manage.py makemigrations --no-input --check --dry-run
    - poetry run python -Wall -mcoverage run manage.py test
    - coverage report --fail-under=100 --omit registrations/urls.py registrations/**.py
    - coverage report --fail-under=100 --omit payments/urls.py payments/**.py
    - coverage report
  after_script:
    - cd website
    - coverage html --directory=covhtml --title="${CI_COMMIT_REF_SLUG} Coverage Report"
  artifacts:
    paths:
      - website/covhtml/

docs tests:
  stage: test
  image: $PY38_IMAGE
  before_script:
    # install django deps
    - poetry install --no-interaction --extras "docs"
  script:
    - echo "Building current docs"
    - cd docs
    - env -u GITLAB_CI poetry run make doctest
    - env -u GITLAB_CI poetry run sphinx-build -W . _build
    - echo "Checking if there are changes"
    - poetry run ./generate-apidocs.sh
    - git diff --exit-code
  artifacts:
    paths:
      - docs/_build

build docker image:
  stage: test
  services:
    - docker:dind
  image: thalia/docker-compose
  tags:
    - docker
  except:
    - tags
  before_script:
    - echo $DOCKER_REGISTRY_PASSWORD | docker login --username thaliawww --password-stdin registry.hub.docker.com
  script:
    - docker-compose config -q
    - docker-compose build --build-arg install_dev_requirements=$DEV_REQUIREMENTS --build-arg source_commit=$(git rev-parse HEAD) web
    - docker tag $DOCKER_LATEST $DOCKER_TAG
    - docker push $DOCKER_TAG
  variables:
    DEV_REQUIREMENTS: 1
    DOCKER_LATEST: registry.hub.docker.com/thalia/concrexit:latest
    DOCKER_TAG: registry.hub.docker.com/thalia/concrexit:$CI_COMMIT_SHA

build production docker image:
  extends: build docker image
  only:
    - tags
  except:
    - master
  after_script:
    - docker tag $DOCKER_TAG $DOCKER_TAG_PRODUCTION
    - docker tag $DOCKER_TAG $DOCKER_LATEST
    - docker push $DOCKER_TAG_PRODUCTION
    - docker push $DOCKER_LATEST    
  variables:
    DOCKER_TAG_PRODUCTION: registry.hub.docker.com/thalia/concrexit:$CI_COMMIT_TAG
    DEV_REQUIREMENTS: 0

coverage deploy:
  stage: "deploy"
  image: "python:latest"
  dependencies:
    - "django-tests"
  environment:
    name: "coverage/${CI_COMMIT_REF_NAME}"
    url: "https://s3-eu-west-1.amazonaws.com/thalia-coverage/${CI_COMMIT_REF_SLUG}/index.html"
  before_script:
      - "pip install awscli"
  script:
    - "aws s3 sync --only-show-errors website/covhtml s3://thalia-coverage/${CI_COMMIT_REF_SLUG}/"

docs deploy:
  stage: "deploy"
  image: "python:latest"
  dependencies:
    - "docs tests"
  environment:
    name: "documentation/${CI_COMMIT_REF_NAME}"
    url: "https://s3-eu-west-1.amazonaws.com/thalia-documentation/${CI_COMMIT_REF_SLUG}/index.html"
  before_script:
      - "pip install awscli"
  script:
    - "aws s3 sync --only-show-errors docs/_build s3://thalia-documentation/${CI_COMMIT_REF_SLUG}/"

.reviewsetup:
  when: "manual"
  image: "python:latest"
  variables:
      AWS_DEFAULT_REGION: "eu-west-1"
  before_script:
    - "DEBIAN_FRONTEND=noninteractive apt-get --yes --quiet update"
    - "DEBIAN_FRONTEND=noninteractive apt-get --yes --quiet install jq"
    - "pip install awscli"

review create:
  extends: ".reviewsetup"
  stage: "deploy"
  environment:
    name: "review/${CI_COMMIT_REF_NAME}"
    url: "https://${CI_COMMIT_REF_SLUG}.public.review.technicie.nl/"
    on_stop: "review remove"
  script:
    - "username=$(head /dev/urandom | tr -dc 'a-z' | head -c 10)"
    - "password=$(head /dev/urandom | tr -dc 'a-zA-Z' | head -c 32)"
    - >-
      sed --in-place
      --expression "s/@version@/$CI_COMMIT_SHA/g"
      --expression "s/@username@/$username/g"
      --expression "s/@password@/$password/g"
      ./resources/ec2-bootstrap.sh
    - "resources/review-host-create.sh"
    - 'echo -e "The deployment is done. Please wait for the website to come up. You can login on https://${CI_COMMIT_REF_SLUG}.public.review.technicie.nl/ with:\nUsername:$username\nPassword:$password"'


review remove:
  extends: ".reviewsetup"
  stage: "deploy"
  environment:
    name: "review/${CI_COMMIT_REF_NAME}"
    action: "stop"
  script:
    - "resources/review-host-remove.sh"

cache:
  key: "$CI_JOB_NAME"
  paths:
    - "${PIP_CACHE_DIR}"
