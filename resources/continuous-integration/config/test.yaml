---

codestyle:
  stage: test
  except:
    - schedules
  image: thalia/concrexit-dependencies
  before_script:
    - poetry install --no-interaction
  script:
    - black --quiet --check website
    # Check for obsolete translations in .po files (starting with `#~`).
    - grep --include="*.po" --files-with-matches --recursive "^#~" website && exit 1 || echo "No obsolete translations found."
    # Check for untranslated strings in .po files
    - empty_strings=$(sed '$a\\' website/**/locale/nl/LC_MESSAGES/django.po | tac | sed '/^$/N;/\nmsgstr ""$/,/^msgid/!d' | tac)
    - empty_strings+=$(sed '$a\\' website/locale/nl/LC_MESSAGES/django.po | tac | sed '/^$/N;/\nmsgstr ""$/,/^msgid/!d' | tac)
    - if [[ $empty_strings ]]; then echo $empty_strings && exit 1; else echo "No untranslated strings found."; fi
    # Check for fuzzy translations in .po files
    - grep --include="*.po" --files-with-matches --recursive "#, fuzzy" website && exit 1 || echo "No fuzzy translations found."

django-tests:
  stage: test
  except:
    - schedules
  image: thalia/concrexit-dependencies
  services:
    - postgres:latest
  before_script:
    - git log -1
    - poetry install --no-interaction
  script:
    - poetry run python website/manage.py check
    - poetry run python website/manage.py templatecheck --project-only
    - poetry run python website/manage.py makemigrations --no-input --check --dry-run
    - poetry run coverage run website/manage.py test website/
    - coverage report --fail-under=100 --omit "website/registrations/urls.py" website/registrations/**.py
    - coverage report --fail-under=100 --omit "website/payments/urls.py" website/payments/**.py
    - coverage report
  after_script:
    - coverage html --directory=covhtml --title="${CI_COMMIT_REF_SLUG} Coverage Report"
  variables:
    POSTGRES_DB: thalia
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  artifacts:
    paths:
      - covhtml

docs-tests:
  stage: test
  except:
    - schedules
  image: thalia/concrexit-dependencies
  before_script:
    - poetry install --no-interaction --extras "docs"
  script:
    - echo "Building current docs"
    - cd docs
    - env -u GITLAB_CI poetry run make doctest
    - env -u GITLAB_CI poetry run sphinx-build -W . _build
    - echo "Checking if there are changes"
    - poetry run ./generate-apidocs.sh
    - git diff --exit-code
  artifacts:
    paths:
      - docs/_build
